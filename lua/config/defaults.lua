local lsp = {
    Array = " ",
    Boolean = "󰨙 ",
    Class = "󰙅 ",
    Constant = "󰏿 ",
    Constructor = " ",
    Enum = " ",
    EnumMember = " ",
    Event = " ",
    Field = "󰜢 ",
    File = "󰈙 ",
    Function = "󰊕 ",
    Interface = "󰕘 ",
    Key = "󰌋 ",
    Method = " ",
    Module = " ",
    Namespace = "󰌗 ",
    Null = "󰢤 ",
    Number = "󰎠 ",
    Object = "󰅩 ",
    Operator = "󰆕 ",
    Package = " ",
    Property = " ",
    String = "󰉾 ",
    Struct = "󱡠 ",
    TypeParameter = "󰊄 ",
    Variable = "󰀫 ",
}

local work = vim.env.WORK ~= nil

local M = {

    ai = {
        copilot = not work,
        codecompanion = {
            enabled = true,
            model = work and "" or "anthropic",
        },
    },

    code_actions = {
        "",
        "quickfix",
        -- "refactor",
        -- "refactor.extract",
        -- "refactor.inline",
        "refactor.rewrite",
        "source",
        "source.fixAll",
        "source.organizeImports",
    },

    -- Filetypes that should be formatted on save.
    formatting = {
        file_types = {
            bash = { "shellharden", "shfmt" },
            bzl = { "buildifier" },
            caddy = { "caddy" },
            direnv = { "shellharden", "shfmt" },
            fish = { "fish_indent" },
            go = { "goimports", "gofumpt" },
            lua = { "stylua" },
            markdown = function(bufnr)
                return { require("helpers.formatting").first(bufnr, "prettierd", "prettier"), "injected" }
            end,
            pyproject = { "pyproject-fmt" },
            python = { "ruff_organize_imports", "ruff_format", "ruff_fix" },
            sh = { "shellharden", "shfmt" },
            toml = function(bufnr)
                local bufname = vim.fs.basename(vim.api.nvim_buf_get_name(bufnr))

                if bufname == "pyproject.toml" then
                    return { "pyproject-fmt", "tombi" }
                end

                return { "tombi" }
            end,
            xml = { "xmlformatter" },
            zsh = { "shellharden", "shfmt" },
        },
        on_save = {
            "bash",
            "caddy",
            "direnv",
            "fish",
            "go",
            "lua",
            "rust",
            "toml",
        },
    },

    linters = {
        css = { "stylelint" },
        fish = { "fish" },
        gitcommit = { "commitlint" },
        github = { "actionlint" },
        go = { "revive" },
        markdown = { "markdownlint-cli2", "write_good" },
        nix = { "deadnix", "statix" },
        protobuf = { "protolint" },
        rst = { "rstcheck", "sphinx-lint" },
        text = { "write_good" },
        yaml = { "yamllint" },
    },

    icons = {
        actions = {
            close = "󰅖 ",
            close_box = "󰅗 ",
            close_hexagon = "󰅜 ",
            close_outline = "󰅚 ",
            close_round = "󰅙 ",
        },
        completion_items = {
            Class = lsp.Class,
            Color = "󰏘 ",
            Constant = lsp.Constant,
            Constructor = lsp.Constructor,
            Enum = lsp.Enum,
            EnumMember = lsp.EnumMember,
            Event = " ",
            Field = lsp.Field,
            File = lsp.File,
            Folder = "󰉋 ",
            Function = lsp.Function,
            Interface = lsp.Interface,
            Keyword = lsp.Key,
            Method = lsp.Method,
            Module = lsp.Module,
            Operator = lsp.Operator,
            Property = lsp.Property,
            Reference = "󰋺 ",
            Snippet = "󰩫 ",
            Struct = lsp.Struct,
            Text = " ",
            TypeParameter = lsp.TypeParameter,
            Unit = " ",
            Value = "󰦨 ",
            Variable = lsp.Variable,
            --
            -- Extras that are not part of lsp.CompleteItemKind.
            Code = " ",
            Copilot = " ",
            Version = "󱘗 ", -- crates.nvim lsp completion type.
        },
        diagnostics = {
            error = "󰅚",
            warn = "󰀪",
            info = "",
            hint = "󰌶",
            debug = "",
            trace = "",
        },
        fold = {
            open = " ",
            closed = "",
        },
        git = {
            add = "",
            added = "",
            branch = " ",
            conflict = " ",
            deleted = "",
            diff = " ",
            ignore = " ",
            ignored = " ",
            logo = "󰊢 ",
            mod = " ",
            modified = "󰄱", -- aka unstaged
            remove = "",
            rename = " ",
            renamed = "",
            repo = " ",
            staged = " ",
            unmerged = "",
            unstaged = "󰄱 ",
            untracked = "*",
        },
        lsp = lsp,
        markdown = {
            MarkdownH1 = "󰉫 ", -- Used by builtin markdown source
            MarkdownH2 = "󰉬 ",
            MarkdownH3 = "󰉭 ",
            MarkdownH4 = "󰉮 ",
            MarkdownH5 = "󰉯 ",
            MarkdownH6 = "󰉰 ",
        },
        menu = {
            actions = {
                outline = {
                    left = "󰨂",
                    right = "󰨃",
                    up = "󰚷",
                    down = "󰚶",
                    swap = "󰩥",
                    filter = "󱃦",
                },
                filled = {
                    up = "󰍠",
                    down = "󰍝",
                    left = "󰍞",
                    right = "󰍟",
                    swap = "󰩤",
                    filter = "󱃥 ",
                },
            },
            hamburger = "󰍜 ",
            hamburger_open = "󰮫 ",
        },
        misc = {
            ai = "󱚦 ",
            actions = " ",
            arrow_right = "",
            block = "▌",
            bookmark = " ",
            bug = " ", --  '󰠭'
            calendar = " ",
            caret_right = "",
            check = "󰄬 ",
            chevron_right = " ",
            circle = " ",
            circle_filled = " ",
            circle_filled_large = "⬤",
            circle_slash = " ",
            clock = " ",
            code = " ",
            comment = "󰅺 ",
            dashboard = " ",
            datetime = "󱛡 ",
            double_chevron_right = "»",
            down = "⇣",
            ellipse_dbl = "",
            ellipsis = "…",
            exit = "󰗼 ",
            fire = " ",
            gear = " ",
            git = " ",
            github = "󰊤 ",
            history = "󰄉 ",
            hook = "󰛢",
            hook_disabled = "󰛣 ",
            indent = "Ξ",
            kebab = "",
            lightbulb = "󰌶 ",
            line = "", -- 'ℓ'
            list = " ",
            lock = "",
            modified = "●",
            newline = "",
            note = "󰎞 ",
            package = " ",
            pencil = " ", -- '󰏫',
            plus = " ",
            project = " ",
            question = " ",
            quickfix = "󱡠",
            robot = "󰚩 ",
            search = "󰍉 ",
            shaded_lock = " ",
            sign_in = " ",
            surround = "󰗅 ",
            tab = "⇥",
            table = " ",
            tools = " ",
            up = "⇡",
        },
        separators = {
            angle_quote = {
                left = "«",
                right = "»",
            },
            chevron = {
                left = "",
                right = "",
                down = "",
            },
            circle = {
                left = "",
                right = "",
            },
            arrow = {
                left = "",
                right = "",
            },
            slant = {
                left = "",
                right = "",
            },
            bar = {
                left = "⎸",
                right = "⎹",
            },
        },
    },

    -- Various buffer and file types that should be ignored.
    ignored = {
        buffer_types = {
            "gitcommit",
            "health",
            "help",
            "nofile",
            "quickfix",
            "terminal",
            "trouble",
        },
        file_types = {
            "",
            "bigfile",
            "checkhealth",
            "crates.nvim",
            "git",
            "gitrebase",
            "health",
            "help",
            "lazy",
            "log",
            "noice",
            "notify",
            "oil",
            "qf",
            "snacks_dashboard",
            "snacks_input",
            "snacks_notif",
            "snacks_picker_input",
            "snacks_win",
            "trouble",
            "vim",
        },
        lsp = {
            "copilot",
            "harper-ls",
        },
        paths = {
            "~/.cache",
            "~/.cargo",
            "~/.local/state",
            "~/.rustup",
            tostring(vim.fn.stdpath("data")),
            tostring(vim.fn.stdpath("state")),
        },
        progress = {
            "basedpyright",
            "copilot",
        },
    },

    statusline = {
        modes = {
            ["n"] = "N",
            ["no"] = "N",
            ["nov"] = "N",
            ["noV"] = "N",
            ["no"] = "N",
            ["niI"] = "N",
            ["niR"] = "N",
            ["niV"] = "N",
            ["v"] = "V",
            ["V"] = "V",
            [""] = "V",
            ["s"] = "S",
            ["S"] = "S",
            [""] = "S",
            ["i"] = "I",
            ["ic"] = "I",
            ["ix"] = "I",
            ["R"] = "R",
            ["Rc"] = "R",
            ["Rv"] = "R",
            ["Rx"] = "R",
            ["r"] = "R",
            ["rm"] = "R",
            ["r?"] = "R",
            ["c"] = "C",
            ["cv"] = "C",
            ["ce"] = "C",
            ["!"] = "T",
            ["t"] = "T",
            ["nt"] = "T",
        },

        wordcount = {
            markdown = true,
            text = true,
            vimwiki = true,
        },
    },

    treesitter = {
        highlight = {
            skip = {
                "bigfile",
            },
        },
        indent = {
            skip = {
                "javascript",
                "markdown",
                "typescript",
            },
        },
    },

    ui = {
        border = {
            name = "single",
            chars = { "─", "│", "─", "│", "┌", "┐", "┘", "└" },
        },
        float = {
            border = "single",
            relative = "editor",
            style = "minimal",
            height = 0.75,
            width = 0.8,
            wo = { wrap = true },
        },
    },

    work = work,
}

return M
